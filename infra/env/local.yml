---
# use this file to define environment-specific variables -- you can also override
# global variables here
# this should reference one of the acounts in the global 'account' object:
account: "{{accounts.local_account}}"
_network_stack: "local-network"
_propertyconfig_stack: "local-propertyconfig-dynamodb"
_cognito_stack: "local-racpad-cognitouserpool"
_customdomain_stack: "local-racapi-apigatewaycustomdomain"
_circuitbreaker_stack: "local-circuitbreaker-dynamodb"
_racevents_sqssns_stack: "local-racevents-sqssns"
_rds_proxy_stack: "local-rdsproxy-endpoint"
# this bucket already exists and is only needed if you need a place to securely store things,
# like ssh keys -- otherwise, just delete or comment out this variable;
# there is currently one for dev account, one for prod account, and
# one for svc account -- rac-dev-admin, rac-prod-admin, rac-svc-admin, respectively
#-- these are *per-AWS account*, not environment:
admin_bucket: rac-dev-admin
# this bucket is used to store cf templates during deployments, as well
# as other app-env specific artifacts that may be needed for applications
# or their deployment; it is intended that you will create/ensure this bucket
# each time create_stacks.yml is run:
app_swagger_ui_bucket: "rac-{{env}}-{{app_name}}-swagger-ui"
cloudfront_logs_bucket: "rac-{{env}}-{{app_name}}-cloudfront-logs"
cloudfront_dns_name: "{{env}}-{{app_name}}.{{dns_zone}}"
cognito_userpoolpdentityprovider_metadataurl: "https://rac.oktapreview.com/app/exku1z34o1oUrn1Dw0h7/sso/saml/metadata"
enterprise_api_url: "https://sssdev.renters-choice-inc.com:8443"
ess_api_url: "https://dev-essapi.rentacenter.com"
laas_stack_name: "test-laas-infra"
__app_name___username_secret: "enterprise"
infra_bucket: "{{infra_buckets.local_infrabucket}}"
racapi_swagger_bucket: "local-racapi"
# this variable controls the buckets that are actually created / ensured
# when you run create_stacks.yml:
my_buckets: []
#  - "{{infra_bucket}}"
# this variable is only needed if using ansible to provision
# a key pair for ssh access to ec2 instances -- once the keys are
# created, you can access the public / private key by referencing
# ec2_key_pairs.<key_name>.key.name
# my_ec2_keys:
# -
# Example if using ec2 instances -- you could use this variable to define
# per-environment instance types
# ec2_instance_type: t2.medium
